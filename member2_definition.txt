# 概要 / 目的

* **目的**: 社内の「デイリーレポート（以下、DR）」と「タスク管理」を一元化し、Slack・Google スプレッドシートと連携して、入力→共有→蓄積→検索→アラートまでを最小工数で実現する。
* **前提（v0.2 反映）**:

  * データストアは **単一のGoogleスプレッドシート（1アカウント管理）**。**各メンバーは同一ファイル内の自分のシート（タブ）**にDRを蓄積する運用。
  * Web上は **最新の週（月〜日）** を既定表示（週切替可）。
  * **Slackは本人として投稿**（ユーザーOAuth優先）。Web投稿→本人Slackへ自動投稿。取り込み元チャンネルは **#00_dailyreport** 固定。
  * タスクは提供CSVスキーマを踏襲し、投稿・閲覧・状態変更・（アラートは一旦保留）を実装。
  * タイムゾーン: **Asia/Taipei**。

---

# スコープ

1. **デイリーレポート機能**（投稿・取り込み・週次表示・検索・エクスポート）
2. **タスク管理機能**（登録・一覧/詳細・フィルタ/検索・状態変更・期限アラート）
3. **認証/認可**（Google OAuth、Slack OAuth）
4. **外部連携**（Slack Events + Web API、Google Sheets API）
5. **監査/ログ/権限**（誰が・いつ・何を）
6. **非機能**（セキュリティ、パフォーマンス、可用性、運用）

---

# 画面一覧（MVP）

1. **ダッシュボード**

   * 今週のDR（自分/チーム）
   * **満足度の週平均の可視化（個人 / 部署 / 全体）—**各対象を個別の折れ線グラフで表示（週開始=月曜, Asia/Taipei）****
   * 期限切れ/今週〆のタスク
   * 通知センター（アラート履歴）
2. **DR一覧/週表示**

   * 週ナビゲーション（今週←→先週）
   * 絞り込み（ユーザー/チャンネル/キーワード/タグ）
   * （ダウンロード機能は**不要**）
3. **DR投稿フォーム**

   * 下記「DR項目（推奨）」を用意（プリセットテンプレ）
   * Slack投稿は常に **#00_dailyreport** へ本人として投稿（ON/OFF設定はなし）
4. **タスク一覧**

   * フィルタ（担当者/状態/重要度/期限/カテゴリ/プロジェクト）
   * 並び替え（期限昇降、重要度、更新日）
5. **タスク詳細**

   * プロパティ表示・編集、履歴（状態遷移・コメント）
6. **設定**

   * Google連携（スプレッドシート紐付け、参照/書込範囲）
   * Slack連携（ワークスペース接続、投稿ユーザー/ボット、取り込み対象チャンネル）
   * 権限（管理者/メンバー/閲覧者）

---

# データ設計

## 1) デイリーレポート

### CSV/現行フォーマット参照からの項目（アップロード資料より）

* 週間の列（例: 月/火/水/木/金/土/日）
* 本文テンプレートに含まれる要素（例）

  1. **昨日の3,4,5を踏まえて今日の満足度**
  2. **今日やったこと（Done）**
  3. **今日のGood / More とその背景**
  4. **今日のMore Next**
  5. **明日やるべきこと（タスク）**
  6. **明日やりたいこと（非タスク）**
  7. **個人的ニュース**

### 推奨データスキーマ（GSシート: `daily_reports` | 個人シート運用を継続しつつ集約シートでも可）

* `report_id`（PK, 文字列: `dr_{yyyymmdd}_{uid}_{rand}`）
* `date`（日付）
* `weekday`（Mon〜Sun）
* `user_id` / `user_name` / `email`
* `slack_user_id` / `slack_team_id`
* `channel_id`（投稿/取り込み元）
* `satisfaction_today`（本文）
* `done_today`（本文：**今日やったこと（Done）**）
* `good_more_background`（本文）
* `more_next`（本文）
* `todo_tomorrow`（本文）
* `wish_tomorrow`（本文）
* `personal_news`（本文）
* `tags`（配列文字列: `#sales #cs` 等）
* `source`（`manual|slack_ingest`）
* `slack_ts`（取り込み元メッセージの ts）
* `created_at` / `updated_at`（ISO）

> **表示要件**: ログイン時に**最新の週（月〜日）**のみを既定表示し、週切り替え可能。

## 2) タスク管理

### 参照CSV（アップロード資料）に存在する主な列

* `プロジェクト名`, `タスク名`, `タスク概要`, `担当者`, `カテゴリ`, `タスク形式`, `状態`, `進捗%`, `リンク`, `重要性`, `着手日`, `期限`, `終了日`, `詳細URL`, `備考`, `優先度`

### 推奨データスキーマ（GSシート: `tasks`）

* `task_id`（PK: `tsk_{yyyymmdd}_{rand}`）
* `project_name`
* `title`
* `description`
* `assignee_name` / `assignee_email` / `slack_user_id`
* `category`
* `task_type`
* `status`（**確定**: `未着手|進行中|レビュー待ち|完了|保留|棄却`）
* `progress_percent`（0–100）
* `priority`（**確定**: `高|中|低`）
* `importance`
* `start_date` / `due_date` / `done_date`
* `links`（複数URL可）
* `notes`
* `created_by` / `created_at` / `updated_at`
* `watchers`（通知先ユーザーIDs）

### 状態遷移（例）

* `未着手 → 進行中 → レビュー待ち → 完了`
* 例外: `未着手 ↔ 保留`, どこからでも `棄却`
* 遷移時に更新者・時刻・コメントを履歴へ追記。

### 期限アラート仕様（初期）

* **v0.2: アラートは保留**（要件確定後に実装）。
* 仕様検討メモ（将来案）: 期限3日以内/当日/超過を担当者へSlack通知、重複抑止、通知時刻は検討のうえ設定。

---

# 外部連携

## Google Sheets API

* アクセス方式: **サービスアカウント（読み/書き）** + 必要に応じてユーザーOAuthで本人シート作成。
* **ファイル構成（確定）**:

  * **単一ファイル**に各メンバーの**個別シート（タブ）**: 例 `山本さん`, `田中さん`, `星川さん` …
  * 集約が必要なら、App Script もしくはETLで**読み取り専用の集約ビュー**（任意）
* **命名規則（案）**: `姓_名` or `表示名` をタブ名に、英字スラッグ列（user_slug）で一意化。
* **部署設定**: `department` はアプリ側の**コード内マッピング**で管理（A〜E）。必要に応じてDR行へも保存可能（任意列）。

## Slack 連携

* **取り込み**: 対象チャンネルは **#00_dailyreport** 固定。テンプレ準拠の投稿のみ抽出し正規化。
* **自動投稿**: WebからのDR投稿時は**ユーザーのSlackトークン**で`chat.postMessage`（本人として投稿）。

  * フォールバック: Bot投稿（Block Kit）
* **必要スコープ（ユーザーOAuth想定）**: `chat:write`, `channels:read`, `users:read`（DM通知や将来拡張時は`im:write`）
* **メッセージ構文（例）**: テンプレ段落を見出し（🔹など）で区切り、週識別タグや`#dr`タグを付与。

  * 段落順: 満足度 → **Done** → Good/More+背景 → More Next → 明日タスク → 明日やりたい → 個人ニュース
* **取り込み**: Slack Events API（`message.channels`）で対象チャンネルを監視。DRテンプレ（見出し・区切り）にマッチした投稿のみ抽出・正規化してGSへappend。
* **自動投稿**: WebからのDR投稿時、

  * 可能なら**ユーザーのSlackトークン**で`chat.postMessage`（本人として投稿）。
  * 難しければ**Bot投稿**（Block Kitで整形）＋本文に投稿者表記。
* **必要スコープ（案）**: `chat:write`, `users:read`, `channels:read`, `im:write`（DM通知用）
* **メッセージ構文（例）**: タグや週識別子を含む固定フォーマット化（テンプレを仕様化）

---

# 認証/認可（RBAC）

* **認証**: Google OAuth（許可ドメイン制限）、Slackは連携時のみユーザーOAuth。
* **ロール**: v0.2 はシンプル運用。

  * **管理者**: 設定変更（Slack/GS紐付け）、全データ閲覧・編集、エクスポート
  * **メンバー**: 自分のDR/タスクの作成・編集、チーム閲覧
* **範囲制御**: **プロジェクト単位の閲覧制限は不要（確定）**。必要になれば将来拡張。

---

# 仕様詳細（MVP要件）

## デイリーレポート

* [POST] WebフォームでDR入力→GS `daily_reports`に1行append→（任意）Slack投稿
* [GET] 週範囲（日付開始: 月/終了: 日）で**自分 + チーム**のDRを取得
* 検索: ユーザー/週/キーワード/タグでフィルタ
* エクスポート: 週単位CSV/Markdown（テンプレあり）
* バリデーション: 必須項目（満足度/More Next 等）

## タスク

* [POST] タスク登録（CSVスキーマ互換）
* [GET] 一覧（ページング）/詳細
* [PATCH] 状態・進捗・期限・担当の更新（履歴に追記）
* アラート: 期限ベース（毎朝実行、重複通知抑止）

---

# 画面項目（抜粋）

## DR投稿フォーム（初期案）

* 日付（既定=今日）
* 今日の満足度
* **今日やったこと（Done）**
* 今日のGood / More と背景
* 今日のMore Next
* 明日やるべきこと（タスク）
* 明日やりたいこと（非タスク）
* 個人的ニュース
* タグ（複数）
* Slack投稿は常に **#00_dailyreport** へ本人として投稿（ON/OFF設定はなし）

## タスク詳細（初期案）

* タイトル、プロジェクト名、担当、状態、優先度、進捗%、期限
* 説明、リンク（複数）、カテゴリ、タスク形式、備考
* 履歴（誰が/何を/いつ）、ウォッチャー
* タイトル、プロジェクト名、担当、状態、優先度、進捗%、期限
* 説明、リンク（複数）、カテゴリ、タスク形式、備考
* 履歴（誰が/何を/いつ）、ウォッチャー

---

# 非機能要件（MVP）

* **可用性**: 99.5%/月
* **レスポンス**: 一覧API < 800ms（50件時）
* **セキュリティ**:

  * OAuth 2.0（Google/Slack）、JWTセッション
  * GSアクセスは最小権限
  * 監査ログ（更新系API）
* **監視**: エラー率/シート書込失敗/Slack投稿失敗をサーバログ＋通知

---

# システム構成（推奨）

* **フロント**: Next.js（既存 `polycle_member` 参考）、Tailwind
* **API**: Next.js API Routes or Cloud Functions（Slack Events受信/GSラッパ）
* **データ**: Google Sheets（App Script or Sheets API 経由）
* **認証**: NextAuth（Google Provider） + Slack OAuth（on-demand）
* **ホスティング**: Vercel/Cloudflareのいずれか

---

# API（例）

* `GET /api/dr?weekStart=YYYY-MM-DD&user=...`
* `POST /api/dr`（本文=DR項目、`slackPost: true|false`）
* `GET /api/tasks?assignee=...&status=...&due=...`
* `POST /api/tasks`
* `PATCH /api/tasks/:id`（部分更新）
* `POST /api/slack/events`（イベント受信）

---

# インテグレーション仕様（詳細）

## Slack→DR取り込み

* 対象チャンネル: **#00_dailyreport** に固定
* 取り込み条件:

  * 見出しや区切り線、絵文字タグ等でDRと判定
  * ユーザー名・日付を解析（なければSlackの`user`/`ts`から補完）
* マッピング: テンプレ段落→スキーマ各列
* 失敗時: リトライ3回、失敗通知（管理者）

## Web→Slack自動投稿

* Slackユーザー投稿: ユーザーOAuth必須（`chat:write`）
* Bot投稿: Botトークンで`chat.postMessage`、ブロックキットで整形

---

# 受け入れ基準（サンプル）

1. ログイン後、ダッシュボードに**今週（月〜日）**のDRが自分/チームで表示される
2. WebからDRを投稿すると、該当ユーザーの**個人タブ**へ1行追加され、**#00_dailyreport** へ本人として整形投稿される
3. **#00_dailyreport** のDRテンプレ投稿は自動取り込みされ、該当ユーザーの個人タブに重複なく追記される
4. **満足度の週平均（個人/部署/全体）**が**個別の折れ線グラフ**で表示される（週の開始は月曜日、欠損は除外）
5. タスクを新規登録→一覧に反映→状態を`進行中`に変更→履歴に反映
6. （アラートは保留のため省略）

---

# 運用/権限・監査

* 管理者は設定から対象チャンネル・連携シート・権限を変更可能
* すべての更新系APIは監査ログに記録（エクスポート可）

---

# 可視化仕様（満足度）

* **グラフ種**: 折れ線グラフ（Line）
* **対象**: 個人 / 部署（A〜E）/ 全体（各々**個別グラフ**として表示）
* **粒度**: 週平均（週開始=月曜, Asia/Taipei）
* **集計**:

  * 個人: `user_slug + week_start`
  * 部署: `department + week_start`（部署マッピングはコード内管理）
  * 全体: `week_start`
* **欠損処理**: 満足度未入力は平均から除外、N=0は「データなし」表示
* **パフォーマンス**: UI側でオンザフライ集計、短期キャッシュ(5–15分)

# 今後の拡張（非MVP）

* ガント/カンバンビュー、バーンダウン
* 週報自動生成（PDF/Slackスレ）
* メンション、コメント、添付
* カスタムフィールド、SLA、Webhook

---

# 未決事項 / 要確認（質問）

1. **単一GSファイルのURL**（本番運用で使用する実体）
2. **タブ命名の最終ルール**（日本語表示名＋英字スラッグ列の併用可否）
3. **SlackユーザーOAuthの保管方針**（トークン暗号化、失効/再承認フロー）
4. **DRテンプレのSlack整形ルール**（見出しの記号、タグ、日付表記のフォーマット）
5. **集約ビューの要否**（単一タブ運用のみで十分か、管理用に一覧も作るか）
6. **CSV→シート移行ユーティリティ**の要否（既存データの初期取り込み手順）

---

**更新履歴**

* v0.2（今回）: 単一GS＋個人タブ運用／Slackは本人投稿／取り込みチャンネル固定（#00_dailyreport）／タスク状態・優先度確定／アラート保留／権限シンプル化。
